// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	GetDHCPLogs(ctx context.Context, in *DHCPLogsRequest, opts ...grpc.CallOption) (*DHCPLogsResponse, error)
	GetNginxLogs(ctx context.Context, in *NginxLogsRequest, opts ...grpc.CallOption) (*NginxLogsResponse, error)
	GetNginxHosts(ctx context.Context, in *NginxHostsRequest, opts ...grpc.CallOption) (*NginxHostsResponse, error)
	GetSwitchLogs(ctx context.Context, in *SwitchLogsRequest, opts ...grpc.CallOption) (*SwitchLogsResponse, error)
	GetSimilarSwitches(ctx context.Context, in *SimilarSwitchesRequest, opts ...grpc.CallOption) (*SimilarSwitchesResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) GetDHCPLogs(ctx context.Context, in *DHCPLogsRequest, opts ...grpc.CallOption) (*DHCPLogsResponse, error) {
	out := new(DHCPLogsResponse)
	err := c.cc.Invoke(ctx, "/pb.logService/GetDHCPLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetNginxLogs(ctx context.Context, in *NginxLogsRequest, opts ...grpc.CallOption) (*NginxLogsResponse, error) {
	out := new(NginxLogsResponse)
	err := c.cc.Invoke(ctx, "/pb.logService/GetNginxLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetNginxHosts(ctx context.Context, in *NginxHostsRequest, opts ...grpc.CallOption) (*NginxHostsResponse, error) {
	out := new(NginxHostsResponse)
	err := c.cc.Invoke(ctx, "/pb.logService/GetNginxHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetSwitchLogs(ctx context.Context, in *SwitchLogsRequest, opts ...grpc.CallOption) (*SwitchLogsResponse, error) {
	out := new(SwitchLogsResponse)
	err := c.cc.Invoke(ctx, "/pb.logService/GetSwitchLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetSimilarSwitches(ctx context.Context, in *SimilarSwitchesRequest, opts ...grpc.CallOption) (*SimilarSwitchesResponse, error) {
	out := new(SimilarSwitchesResponse)
	err := c.cc.Invoke(ctx, "/pb.logService/GetSimilarSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	GetDHCPLogs(context.Context, *DHCPLogsRequest) (*DHCPLogsResponse, error)
	GetNginxLogs(context.Context, *NginxLogsRequest) (*NginxLogsResponse, error)
	GetNginxHosts(context.Context, *NginxHostsRequest) (*NginxHostsResponse, error)
	GetSwitchLogs(context.Context, *SwitchLogsRequest) (*SwitchLogsResponse, error)
	GetSimilarSwitches(context.Context, *SimilarSwitchesRequest) (*SimilarSwitchesResponse, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) GetDHCPLogs(context.Context, *DHCPLogsRequest) (*DHCPLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHCPLogs not implemented")
}
func (UnimplementedLogServiceServer) GetNginxLogs(context.Context, *NginxLogsRequest) (*NginxLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNginxLogs not implemented")
}
func (UnimplementedLogServiceServer) GetNginxHosts(context.Context, *NginxHostsRequest) (*NginxHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNginxHosts not implemented")
}
func (UnimplementedLogServiceServer) GetSwitchLogs(context.Context, *SwitchLogsRequest) (*SwitchLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchLogs not implemented")
}
func (UnimplementedLogServiceServer) GetSimilarSwitches(context.Context, *SimilarSwitchesRequest) (*SimilarSwitchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimilarSwitches not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_GetDHCPLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetDHCPLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.logService/GetDHCPLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetDHCPLogs(ctx, req.(*DHCPLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetNginxLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NginxLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetNginxLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.logService/GetNginxLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetNginxLogs(ctx, req.(*NginxLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetNginxHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NginxHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetNginxHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.logService/GetNginxHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetNginxHosts(ctx, req.(*NginxHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetSwitchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetSwitchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.logService/GetSwitchLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetSwitchLogs(ctx, req.(*SwitchLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetSimilarSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetSimilarSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.logService/GetSimilarSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetSimilarSwitches(ctx, req.(*SimilarSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.logService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDHCPLogs",
			Handler:    _LogService_GetDHCPLogs_Handler,
		},
		{
			MethodName: "GetNginxLogs",
			Handler:    _LogService_GetNginxLogs_Handler,
		},
		{
			MethodName: "GetNginxHosts",
			Handler:    _LogService_GetNginxHosts_Handler,
		},
		{
			MethodName: "GetSwitchLogs",
			Handler:    _LogService_GetSwitchLogs_Handler,
		},
		{
			MethodName: "GetSimilarSwitches",
			Handler:    _LogService_GetSimilarSwitches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
